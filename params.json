{"name":"Proj4leaflet","google":"","tagline":"Smooth Proj4js integration with Leaflet.","body":"# Proj4Leaflet\r\n\r\nThis is an early attempt at integrating [Proj4js](http://proj4js.org/) with the excellent map client [Leaflet](http://leaflet.cloudmade.com). We decided to put this into a separate library for now to avoid adding unnecessary dependencies to Leaflet.\r\n\r\nFor more details, see this [blog post on tiling and projections](http://blog.kartena.se/local-projections-in-a-world-of-spherical-mercator/).\r\n\r\n## Example\r\nDefines the EPSG:2400 (RT90) projection in Proj4 format and returns a Leaflet CRS object which can be used as the \"crs\" option to L.Map.\r\n\r\n```javascript\r\n// RT90\r\nL.CRS.proj4js('EPSG:2400',\r\n  '+lon_0=15.808277777799999 +lat_0=0.0 +k=1.0 +x_0=1500000.0 ' +\r\n  '+y_0=0.0 +proj=tmerc +ellps=bessel +units=m ' +\r\n  '+towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0 +no_defs', \r\n  new L.Transformation(1, 0, -1, 0));\r\n\r\n// ETRS89 / UTM zone 33N\r\nL.CRS.proj4js('EPSG:25833', \r\n  '+proj=utm +zone=33 +ellps=GRS80 +units=m +no_defs', \r\n  new L.Transformation(1, 2500000, -1, 9045984));\r\n\r\n// SWEREF 99 TM\r\nL.CRS.proj4js('EPSG:3006', \r\n  '+proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs',\r\n  new L.Transformation(1, -218128.7031, -1, 6126002.9379));\r\n```\r\n\r\nMore details in [examples/script.js](https://github.com/kartena/Proj4Leaflet/blob/master/examples/script.js)\r\n\r\n## Transformations\r\nTransformation turns projected coordinates into pixel coordinates corresponding to a given zoom. \r\n\r\nIt uses the following formula: \r\n\r\n```javascript\r\npoint.x = scale * (this._a * point.x + this._b);                            \r\npoint.y = scale * (this._c * point.y + this._d);     \r\n```\r\n\r\nwhich we usually define as  \r\n\r\n```\r\na = 1 \r\nb = -(x_origin)\r\nc = -1\r\nd = y_origin\r\n```\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}